#!/bin/bash

# スクリプトの開始を通知
echo "--- Git Push Automation Script ---"

# 変更内容を入力させる
echo "コミットメッセージを入力してください (例: 'feat: 新機能追加', 'fix: バグ修正'):"
read commit_message

# コミットメッセージが空でないか確認
if [ -z "$commit_message" ]; then
  echo "エラー: コミットメッセージが入力されていません。処理を中断します。"
  exit 1
fi

# ----------------------------------------
# 1. 全ての変更をステージング
# ----------------------------------------
echo ""
echo ">>> 全ての変更をステージング中..."
git add .
if [ $? -ne 0 ]; then
  echo "エラー: git add に失敗しました。処理を中断します。"
  exit 1
fi
echo "    ステージング完了。"

# ----------------------------------------
# 2. 変更をコミット
# ----------------------------------------
echo ""
echo ">>> コミット中: \"$commit_message\""
git commit -m "$commit_message"
if [ $? -ne 0 ]; then
  echo "エラー: git commit に失敗しました。未ステージングの変更がないか確認してください。"
  echo "    (変更がない場合もエラーになることがあります)"
  exit 1
fi
echo "    コミット完了。"

# ----------------------------------------
# 3. リモートの最新変更をプルし、リベース
# ----------------------------------------
echo ""
echo ">>> リモートの最新変更をプル（rebaseモードで）..."
# リモートブランチ名を指定。通常は 'main' または 'master'
# もしデフォルトブランチが異なる場合はここを修正してください
git pull origin main --rebase
if [ $? -ne 0 ]; then
  echo "エラー: git pull --rebase に失敗しました。"
  echo "    マージ競合が発生した可能性があります。手動で解決し、git rebase --continue を実行してください。"
  echo "    競合を解決できない場合は git rebase --abort で中断できます。"
  exit 1
fi
echo "    プル（rebase）完了。ローカルリポジトリを最新に同期しました。"

# ----------------------------------------
# 4. 変更をリモートにプッシュ
# ----------------------------------------
echo ""
echo ">>> リモートリポジトリにプッシュ中..."
git push origin main
if [ $? -ne 0 ]; then
  echo "エラー: git push に失敗しました。再度お試しください。"
  echo "    または、リモートにまだ未解決の競合がある可能性があります。"
  exit 1
fi
echo "    プッシュ完了！コードがGitHubにアップロードされました。"

echo ""
echo "--- スクリプトが正常に終了しました ---"